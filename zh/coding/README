关于程序设计
============

现在的程序设计人员，基本上有这么几种：

-   一种是在不停的堆砌“上层建筑”，对底层不闻不问。
    这就好像一个人只想着搞宏观经济，对粮食是怎么生产的，馒头是怎么加工的一无所知。
    这样的问题在于，这样设计出来的“上层建筑”没有一个相对应的微观环境和客观条件的支持，
    无法达到预期效果，甚至与预期相去甚远。这样的人大都在搞一些上层的应用，比如像网络编程，
    有大把大把的现成的库可以用，你跟本不用去关心一个功能是如何实现的。但同时你也有可能
    忽视了一个功能的一种实现有什么限制，有什么缺陷。

-   一种是在不停的堆砌“下层建筑”，对上层不闻不问。
    这就好比一个建筑工人只知道怎么垒墙，却永远无法像城市规划者那样去建设城市。
    这样的人大都是搞非常底层的开发，他们知道芯片里的某一个外设的寄存器应该怎么配置，
    这样的外设应该怎么用，能做多少种不同的事情。这样的人可能经常会不知道一个外设
    为什么要这样设计，为什么要产生这样几个不同的中断，以及这样的设计对上层软件的意义是什么。

-   第三种是从上到下皆通。就好像一个农民出身的总理一样，他知道最底层经济的根本规律，
    也明白宏观经济应该怎样调整。既知道底层硬件怎么用，也知道上层软件如何设计以便最好的利用硬件的能力。

当然，“上层”与“下层”只是相对的概念。比如，用户空间的应用可以认为较内核驱动“上层”，而在内核驱动内部，
内核驱动的框架又较具体硬件的配置“上层”。

第三种的优势是无与伦比的。举个例子，当年Larry Page和Sergey Brin创建Google的时候，他们要做的是一个
搜索引擎。这是一个“上层建筑”。你只需要去把网页爬下来，建索引就好了。但是，正因为Larry和Sergey不但精通
上层，对Linux Kernel文件系统这样相对底层的技术也很精通，他们重新设计一个新的分布式文件系统，对搜索引擎
提供强大的IO支持。

我从2005年真正开始编写程序。作为一个非计算机专业的业于程序员，我秉承了我从小到大学习的一个基本习惯，
就是对任何问题都不放过。慢慢的，我发现我虽然学的慢，但是学的扎实，到头来真正复杂的问题，只有对整个系统
从上到下都有认识，才能很快隔离出问题的所在，找到真正高效正确的解决方案，而不是用一个新的Bug去隐藏一个
旧的Bug。

这里将会发布一些跟通用编程有关的思考和建议。

